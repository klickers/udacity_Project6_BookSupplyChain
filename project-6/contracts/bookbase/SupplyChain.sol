pragma solidity >=0.4.24;

import '../bookcore/Ownable.sol';
import '../bookaccesscontrol/AuthorRole.sol';
import '../bookaccesscontrol/EditorRole.sol';
import '../bookaccesscontrol/DesignerRole.sol';
import '../bookaccesscontrol/ConsumerRole.sol';

// Define a contract 'SupplyChain'
contract SupplyChain is Ownable, AuthorRole, EditorRole, DesignerRole, ConsumerRole {

    // Define 'owner'
    address payable owner;

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint  upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint  sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping (uint => Item) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) itemsHistory;

    // Define enum 'State' with the following values:
    enum State
    {
        Written,               // 0
        SentForEditing,        // 1
        Edited,                // 2
        FinalDraft,            // 3
        SentForDesign,         // 4
        Designed,              // 5
        Published,             // 6
        Advertised,            // 7
        Purchased              // 8
    }

    State constant defaultState = State.Written;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint    sku;  // Stock Keeping Unit (SKU)
        uint    upc; // Universal Product Code (UPC), generated by the Author, goes on the package, can be verified by the Consumer
        address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 9 stages
        address payable originAuthorID; // Metamask-Ethereum address of the Author
        string  originAuthorName; // Author Name
        string  originAuthorInformation;  // Author Information
        uint    productID;  // Product ID potentially a combination of upc + sku
        string  productNotes; // Product Notes
        uint    productPrice; // Product Price
        State   itemState;  // Product State as represented in the enum above
        address editorID;  // Metamask-Ethereum address of the Editor
        address designerID;  // Metamask-Ethereum address of the Designer
        address payable consumerID;  // Metamask-Ethereum address of the Consumer
    }

    // Define 9 events with the same 9 state values and accept 'upc' as input argument
    event Written(uint upc);
    event SentForEditing(uint upc);
    event Edited(uint upc);
    event FinalDraft(uint upc);
    event SentForDesign(uint upc);
    event Designed(uint upc);
    event Published(uint upc);
    event Advertised(uint upc);
    event Purchased(uint upc);

    // Define a modifer that checks to see if msg.sender == owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    // Define a modifer that verifies the Caller
    modifier verifyCaller (address _address) {
        require(msg.sender == _address);
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) {
        require(msg.value >= _price);
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint _upc) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        items[_upc].consumerID.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Written
    modifier written(uint _upc) {
        require(items[_upc].itemState == State.Written);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is SentForEditing
    modifier sentForEditing(uint _upc) {
        require(items[_upc].itemState == State.SentForEditing);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Edited
    modifier edited(uint _upc) {
        require(items[_upc].itemState == State.Edited);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is FinalDraft
    modifier finalDraft(uint _upc) {
        require(items[_upc].itemState == State.FinalDraft);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is SentForDesign
    modifier sentForDesign(uint _upc) {
        require(items[_upc].itemState == State.SentForDesign);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Designed
    modifier designed(uint _upc) {
        require(items[_upc].itemState == State.Designed);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Published
    modifier published(uint _upc) {
        require(items[_upc].itemState == State.Published);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Advertised
    modifier advertised(uint _upc) {
        require(items[_upc].itemState == State.Advertised);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint _upc) {
        require(items[_upc].itemState == State.Purchased);
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable {
        owner = msg.sender;
        sku = 1;
        upc = 1;
    }

    // Define a function 'kill' if required
    function kill() public {
        if (msg.sender == owner) {
            selfdestruct(owner);
        }
    }

    // Define a function 'writeBook' that allows an author to mark an item 'Written'
    function writeBook
    (
        uint _upc,
        address payable _originAuthorID,
        string  memory  _originAuthorName,
        string  memory  _originAuthorInformation,
        string  memory  _productNotes
    )
        public
        onlyAuthor
    {
        // Add the new item as part of Written
        items[_upc].sku = sku;
        items[_upc].upc = upc;
        items[_upc].ownerID = _originAuthorID;
        items[_upc].originAuthorID = _originAuthorID;
        items[_upc].originAuthorName = _originAuthorName;
        items[_upc].originAuthorInformation = _originAuthorInformation;
        items[_upc].productID = upc + sku;
        items[_upc].productNotes = _productNotes;
        items[_upc].itemState = State.Written;
        // Increment sku
        sku = sku + 1;
        // Emit the appropriate event
        emit Written(_upc);
    }

    // Define a function 'sendForEditing' that allows an author to mark an item 'SentForEditing'
    function sendForEditing(uint _upc)
        public
        // Call modifier to check if upc has passed previous supply chain stage
        written(_upc)
        // Call modifier to verify caller of this function
        verifyCaller(items[_upc].originAuthorID)
        onlyAuthor
        returns (string memory)
    {
        // Update the appropriate fields
        items[_upc].itemState = State.SentForEditing;
        // Emit the appropriate event
        emit SentForEditing(_upc);
        return items[_upc].productNotes;
    }

    // Define a function 'editBook' that allows an editor to mark an item 'Edited'
    function editBook(uint _upc) public
        // Call modifier to check if upc has passed previous supply chain stage
        sentForEditing(_upc)
        onlyEditor
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Edited;
        items[_upc].editorID = msg.sender;
        // Emit the appropriate event
        emit Edited(_upc);
    }

    // Define a function 'finishFinalDraft' that allows an author to mark an item 'FinalDraft'
    function finishFinalDraft(uint _upc) public
        // Call modifier to check if upc has passed previous supply chain stage
        edited(_upc)
        // Verify caller identity
        verifyCaller(items[_upc].ownerID)
        onlyAuthor
    {
        // Update the appropriate fields
        items[_upc].itemState = State.FinalDraft;
        // Emit the appropriate event
        emit FinalDraft(_upc);
    }

    // Define a function 'sendForDesign' that allows an author to mark an item 'SentForDesign'
    function sendForDesign(uint _upc) public
        // Call modifier to check if upc has passed previous supply chain stage
        finalDraft(_upc)
        // Verify caller identity
        verifyCaller(items[_upc].ownerID)
        onlyAuthor
    {
        // Update the appropriate fields
        items[_upc].itemState = State.SentForDesign;
        // Emit the appropriate event
        emit SentForDesign(_upc);
    }

    // Define a function 'designBook' that allows a designer to mark an item 'Designed'
    function designBook(uint _upc) public
        // Call modifier to check if upc has passed previous supply chain stage
        sentForDesign(_upc)
        onlyDesigner
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Designed;
        items[_upc].designerID = msg.sender;
        // Emit the appropriate event
        emit Designed(_upc);
    }

    // Define a function 'publishBook' that allows an author to mark an item 'Published'
    function publishBook(uint _upc, uint _price) public
        // Call modifier to check if upc has passed previous supply chain stage
        designed(_upc)
        // Verify caller identity
        verifyCaller(items[_upc].ownerID)
        onlyAuthor
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Published;
        items[_upc].productPrice = _price;
        // Emit the appropriate event
        emit Published(_upc);
    }

    // Define a function 'advertiseBook' that allows a designer to mark an item 'Advertised'
    function advertiseBook(uint _upc) public
        // Call modifier to check if upc has passed previous supply chain stage
        published(_upc)
        // Verify caller identity
        verifyCaller(items[_upc].ownerID)
        onlyAuthor
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Advertised;
        // Emit the appropriate event
        emit Advertised(_upc);
    }

    // Define a function 'buyBook' that allows a consumer to mark an item 'Purchased'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
    // and any excess ether sent is refunded back to the buyer
    function buyBook(uint _upc) public payable
        // Call modifier to check if upc has passed previous supply chain stage
        advertised(_upc)
        paidEnough(items[_upc].productPrice)
        // Call modifer to send any excess ether back to buyer
        checkValue(_upc)
        onlyConsumer
    {
        // Update the appropriate fields - ownerID, consumerID, itemState
        items[_upc].itemState = State.Purchased;
        items[_upc].ownerID = msg.sender;
        items[_upc].consumerID = msg.sender;
        // Transfer money to author
        items[_upc].originAuthorID.transfer(items[_upc].productPrice);
        // emit the appropriate event
        emit Purchased(_upc);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint _upc) public view returns
    (
        uint    itemSKU,
        uint    itemUPC,
        address ownerID,
        address originAuthorID,
        string  memory originAuthorName,
        string  memory originAuthorInformation
    )
    {
        // Assign values to the 6 parameters
        itemSKU = items[_upc].sku;
        itemUPC = items[_upc].upc;
        ownerID = items[_upc].ownerID;
        originAuthorID = items[_upc].originAuthorID;
        originAuthorName = items[_upc].originAuthorName;
        originAuthorInformation = items[_upc].originAuthorInformation;

        return
        (
            itemSKU,
            itemUPC,
            ownerID,
            originAuthorID,
            originAuthorName,
            originAuthorInformation
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint _upc) public view returns
    (
        uint    itemSKU,
        uint    itemUPC,
        uint    productID,
        string  memory productNotes,
        uint    productPrice,
        uint    itemState,
        address editorID,
        address designerID,
        address consumerID
    )
    {
        // Assign values to the 9 parameters
        itemSKU = items[_upc].sku;
        itemUPC = items[_upc].upc;
        productID = items[_upc].productID;
        productNotes = items[_upc].productNotes;
        productPrice = items[_upc].productPrice;
        itemState = uint(items[_upc].itemState);
        editorID = items[_upc].editorID;
        designerID = items[_upc].designerID;
        consumerID = items[_upc].consumerID;

        return
        (
            itemSKU,
            itemUPC,
            productID,
            productNotes,
            productPrice,
            itemState,
            editorID,
            designerID,
            consumerID
        );
    }
}
